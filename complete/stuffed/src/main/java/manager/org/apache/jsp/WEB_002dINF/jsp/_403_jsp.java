/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat10
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package manager.org.apache.jsp.WEB_002dINF.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class _403_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n <head>\n  <title>403 Access Denied</title>\n  <style type=\"text/css\">\n    <!--\n    BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;font-size:12px;}\n    H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;}\n    PRE, TT {border: 1px dotted #525D76}\n    A {color : black;}A.name {color : black;}\n    -->\n  </style>\n </head>\n <body>\n   <h1>403 Access Denied</h1>\n   <p>\n    You are not authorized to view this page.\n   </p>\n   <p>\n    By default the Manager is only accessible from a browser running on the\n    same machine as Tomcat. If you wish to modify this restriction, you'll need\n    to edit the Manager's <tt>context.xml</tt> file.\n   </p>\n   <p>\n    If you have already configured the Manager application to allow access and\n    you have used your browsers back button, used a saved book-mark or similar\n    then you may have triggered the cross-site request forgery (CSRF) protection\n");
      out.write("    that has been enabled for the HTML interface of the Manager application. You\n    will need to reset this protection by returning to the\n    <a href=\"");
      out.print(request.getContextPath());
      out.write("/html\">main Manager page</a>. Once you\n    return to this page, you will be able to continue using the Manager\n    application's HTML interface normally. If you continue to see this access\n    denied message, check that you have the necessary permissions to access this\n    application.\n   </p>\n   <p>\n    If you have not changed\n    any configuration files, please examine the file\n    <tt>conf/tomcat-users.xml</tt> in your installation. That\n    file must contain the credentials to let you use this webapp.\n   </p>\n   <p>\n    For example, to add the <tt>manager-gui</tt> role to a user named\n    <tt>tomcat</tt> with a password of <tt>s3cret</tt>, add the following to the\n    config file listed above.\n   </p>\n<pre>\n&lt;role rolename=\"manager-gui\"/&gt;\n&lt;user username=\"tomcat\" password=\"s3cret\" roles=\"manager-gui\"/&gt;\n</pre>\n   <p>\n    Note that for Tomcat 7 onwards, the roles required to use the manager\n    application were changed from the single <tt>manager</tt> role to the\n    following four roles. You will need to assign the role(s) required for\n");
      out.write("    the functionality you wish to access.\n   </p>\n    <ul>\n      <li><tt>manager-gui</tt> - allows access to the HTML GUI and the status\n          pages</li>\n      <li><tt>manager-script</tt> - allows access to the text interface and the\n          status pages</li>\n      <li><tt>manager-jmx</tt> - allows access to the JMX proxy and the status\n          pages</li>\n      <li><tt>manager-status</tt> - allows access to the status pages only</li>\n    </ul>\n   <p>\n    The HTML interface is protected against CSRF but the text and JMX interfaces\n    are not. To maintain the CSRF protection:\n   </p>\n   <ul>\n    <li>Users with the <tt>manager-gui</tt> role should not be granted either\n        the <tt>manager-script</tt> or <tt>manager-jmx</tt> roles.</li>\n    <li>If the text or jmx interfaces are accessed through a browser (e.g. for\n        testing since these interfaces are intended for tools not humans) then\n        the browser must be closed afterwards to terminate the session.</li>\n   </ul>\n   <p>\n    For more information - please see the\n");
      out.write("    <a href=\"/docs/manager-howto.html\" rel=\"noopener noreferrer\">Manager App How-To</a>.\n   </p>\n </body>\n\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
